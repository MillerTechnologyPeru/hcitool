
//
//  Command.swift
//  hcitoolPackageDescription
//
//  Created by Marco Estrella on 3/26/18.
//

import Foundation
import Bluetooth

public enum CommandType: String {
    
    // Low Energy Scan
    case lowEnergyScan = "lescan"
    
    // iBeacon
    case iBeacon = "ibeacon"
    
    // Reads the Bluetooth controller's local name.
    case readLocalName = "readname"
    
    // Write the Bluetooth controller's local name.
    case writeLocalName = "writename"
    
    // Set the Bluetooth controller's random address
    case lowEnergySetRandomAddress = "setrandomaddress"
    
    // Clear the White List stored in the Controller.
    case lowEnergyClearWhiteList = "clearwhitelist"
    
    //  Cancel the LE_Create_Connection or LE_Extended_Create_Connection commands.
    case lowEnergyCreateConnectionCancel = "createconnectioncancel"
    
    // Requests the list of the supported LE features for the Controller.
    case lowEnergyReadLocalSupportedFeatures = "readlocalsupportedfeatures"
    
    // Controls which LE events are generated by the HCI for the Host.
    case lowEnergySetEventMask = "seteventmask"
    
    // Reads the maximum size of the data portion of HCI LE ACL Data Packets sent from the Host to the Controller.
    case lowEnergyReadBufferSize = "readbuffersize"
    
    // Returns the current Channel_Map for the specified Connection_Handle.
    case lowEnergyReadChannelMap = "readchannelmap"
    
    //  Adds a single device to the White List stored in the Controller.
    case lowEnergyAddDeviceToWhiteList = "adddevicetowhitelist"
    
    //  Removes a single device from the White List stored in the Controller.
    case lowEnergyRemoveDeviceFromWhiteList = "removedevicefromwhitelist"
    
    // Reads the total number of White List entries that can be stored in the Controller.
    case lowEnergyReadWhiteListSize = "readwhitelistsize"
    
    // Used by the Host to read the transmit power level used for LE advertising channel packets.
    case lowEnergyReadAdvertisingChannelTxPower = "readadvertisingchanneltxpower"
    
    // Requests the Controller to generate 8 octets of random data to be sent to the Host.
    case lowEnergyRand = "rand"
    
    // Used by the Host to set the advertising parameters.
    case lowEnergySetAdvertisingParameters = "setadvertisingparameters"
    
    // Used to change the Link Layer connection parameters of a connection.
    case lowEnergyConnectionUpdate = "connectionupdate"
    
    // Used to request the Controller to start or stop advertising.
    case lowEnergySetAdvertisingEnable = "setadvertisingenable"
    
    // Used to create a Link Layer connection to a connectable advertiser.
    case lowEnergyCreateConnection = "createconnection"
    
    // Requests the features used on the connection and the features supported by the remote device.
    case lowEnergyReadRemoteFeatures = "readremotefeatures"
    
    // Encrypts the Plaintext Data
    case lowEnergyEncrypt   = "encrypt"
    
    // Replies to an LE Long Term Key Request event from the Controller if the Host cannot provide a Long Term Key for this Connection_Handle
    case lowEnergyLongTermKeyRequestNegativeReply = "longtermkeyrequestnegativereply"
    
    // Replies to an LE Long Term Key Request event from the Controller, and specifies the Long_Term_Key parameter that shall be used for this Connection_Handle.
    case lowEnergyLongTermKeyRequestReply = "longtermkeyrequestreply"
    
    // Used to authenticate the given encryption key associated with the remote device specified by the Connection_Handle, and once authenticated will encrypt the connection.
    case lowEnergyStartEncryption = "startencryption"
    
    // Reads the states and state combinations that the link layer supports.
    case lowEnergyReadSupportedStates = "readsupportedstates"
    
    // Starts a test where the DUT receives test reference packets at a fixed interval.
    case lowEnergyReceiverTest = "receivertest"
    
    // Starts a test where the DUT generates test reference packets at a fixed interval.
    case lowEnergyTransmitterTest = "transmittertest"
    
    // Stops any test which is in progress.
    case lowEnergyTestEnd = "testend"
    
    // Adds one device to the list of address translations used to resolve Resolvable Private Addresses in the Controller.
    case lowEnergyAddDeviceToResolvingList = "adddevicetoresolvinglist"
    
    // Removes one device from the list of address translations used to resolve Resolvable Private Addresses in the Controller.
    case lowEnergyRemoveDeviceFromResolvingList = "removedevicefromresolvinglist"
    
    // Allows the Host to suggest maximum transmission packet size and maximum packet transmission time
    case lowEnergySetDataLength = "setdatalength"
}

public enum Command {
    
    case iBeacon(iBeaconCommand)
    
    // Reads the Bluetooth controller's local name.
    case readLocalName
    
    // Write the Bluetooth controller's local name.
    case writeLocalName(WriteLocalNameCommand)
    
    // Set the Bluetooth controller's random address
    case lowEnergySetRandomAddress(LESetRandomAddressCommand)
    
    // Low Energy Scan
    case lowEnergyScan(LEScanCommand)
    
    // Clear the White List stored in the Controller.
    case lowEnergyClearWhiteList
    
    //  Cancel the LE_Create_Connection or LE_Extended_Create_Connection commands.
    case lowEnergyCreateConnectionCancel
    
    // Requests the list of the supported LE features for the Controller.
    case lowEnergyReadLocalSupportedFeatures
    
    // Controls which LE events are generated by the HCI for the Host.
    case lowEnergySetEventMask(LESetEventMaskCommand)
    
    // Reads the maximum size of the data portion of HCI LE ACL Data Packets sent from the Host to the Controller.
    case lowEnergyReadBufferSize
    
    // Returns the current Channel_Map for the specified Connection_Handle.
    case lowEnergyReadChannelMap(LEReadChannelMapCommand)
    
    //  Adds a single device to the White List stored in the Controller.
    case lowEnergyAddDeviceToWhiteList(LEAddDeviceToWhiteListCommand)
    
    //  Removes a single device from the White List stored in the Controller.
    case lowEnergyRemoveDeviceFromWhiteList(LERemoveDeviceFromWhiteListCommand)
    
    // Reads the total number of White List entries that can be stored in the Controller.
    case lowEnergyReadWhiteListSize
    
    //  Used by the Host to read the transmit power level used for LE advertising channel packets.
    case lowEnergyReadAdvertisingChannelTxPower
    
    // Requests the Controller to generate 8 octets of random data to be sent to the Host.
    case lowEnergyRand
    
    // Used by the Host to set the advertising parameters.
    case lowEnergySetAdvertisingParameters(LESetAdvertisingParametersCommand)
    
    // Used to change the Link Layer connection parameters of a connection.
    case lowEnergyConnectionUpdate(LEConnectionUpdateCommand)
    
    // Used to request the Controller to start or stop advertising.
    case lowEnergySetAdvertisingEnable(LESetAdvertisingEnableCommand)
    
    //Used to create a Link Layer connection to a connectable advertiser.
    case lowEnergyCreateConnection(LECreateConnectionCommand)
    
    // Requests the features used on the connection and the features supported by the remote device.
    case lowEnergyReadRemoteFeatures(LEReadRemoteFeaturesCommand)
    
    // Encrypts the Plaintext Data
    case lowEnergyEncrypt(LEEncryptCommand)
    
    // Replies to an LE Long Term Key Request event from the Controller if the Host cannot provide a Long Term Key for this Connection_Handle
    case lowEnergyLongTermKeyRequestNegativeReply(LELongTermKeyRequestNegativeReplyCommand)
    
    // Replies to an LE Long Term Key Request event from the Controller, and specifies the Long_Term_Key parameter that shall be used for this Connection_Handle.
    case lowEnergyLongTermKeyRequestReply(LELongTermKeyRequestReplyCommand)
    
    //  Used to authenticate the given encryption key associated with the remote device specified by the Connection_Handle, and once authenticated will encrypt the connection.
    case lowEnergyStartEncryption(LEStartEncryptionCommand)
    
    // Reads the states and state combinations that the link layer supports.
    case lowEnergyReadSupportedStates
    
    // Starts a test where the DUT receives test reference packets at a fixed interval.
    case lowEnergyReceiverTest(LEReceiverTestCommand)
    
    // Starts a test where the DUT generates test reference packets at a fixed interval.
    case lowEnergyTransmitterTest(LETransmitterTestCommand)
    
    // Stops any test which is in progress.
    case lowEnergyTestEnd
    
    // Adds one device to the list of address translations used to resolve Resolvable Private Addresses in the Controller.
    case lowEnergyAddDeviceToResolvingList(LEAddDeviceToResolvingListCommand)
    
    // Removes one device from the list of address translations used to resolve Resolvable Private Addresses in the Controller.
    case lowEnergyRemoveDeviceFromResolvingList(LERemoveDeviceFromResolvingListCommand)
    
    // Allows the Host to suggest maximum transmission packet size and maximum packet transmission time
    case lowEnergySetDataLength(LESetDataLengthCommand)
}

public extension Command {
    
    public func execute <Controller: BluetoothHostControllerInterface> (controller: Controller) throws {
        
        switch self {
        case let .lowEnergyScan(command): try command.execute(controller: controller)
        case .readLocalName: try ReadLocalNameCommand().execute(controller: controller)
        case let .writeLocalName(command): try command.execute(controller: controller)
        case let .iBeacon(command): try command.execute(controller: controller)
        case let .lowEnergySetRandomAddress(command): try command.execute(controller: controller)
        case .lowEnergyClearWhiteList: try LEClearWhiteListCommand().execute(controller: controller)
        case .lowEnergyCreateConnectionCancel: try LECreateConnectionCancelCommand().execute(controller: controller)
        case .lowEnergyReadLocalSupportedFeatures: try LEReadLocalSupportedFeaturesCommand().execute(controller: controller)
        case let .lowEnergySetEventMask(command): try command.execute(controller: controller)
        case .lowEnergyReadBufferSize: try LEReadBufferSizeCommand().execute(controller: controller)
        case let .lowEnergyReadChannelMap(command): try command.execute(controller: controller)
        case let .lowEnergyAddDeviceToWhiteList(command): try command.execute(controller: controller)
        case let .lowEnergyRemoveDeviceFromWhiteList(command): try command.execute(controller: controller)
        case .lowEnergyReadWhiteListSize: try LEReadWhiteListSizeCommand().execute(controller: controller)
        case .lowEnergyReadAdvertisingChannelTxPower: try LEReadAdvertisingChannelTxPowerCommand().execute(controller: controller)
        case .lowEnergyRand: try LERandCommand().execute(controller: controller)
        case let .lowEnergySetAdvertisingParameters(command): try command.execute(controller: controller)
        case let .lowEnergyConnectionUpdate(command): try command.execute(controller: controller)
        case let .lowEnergySetAdvertisingEnable(command): try command.execute(controller: controller)
        case let .lowEnergyCreateConnection(command): try command.execute(controller: controller)
        case let .lowEnergyReadRemoteFeatures(command): try command.execute(controller: controller)
        case let .lowEnergyEncrypt(command): try command.execute(controller: controller)
        case let .lowEnergyLongTermKeyRequestNegativeReply(command): try command.execute(controller: controller)
        case let .lowEnergyLongTermKeyRequestReply(command): try command.execute(controller: controller)
        case let .lowEnergyStartEncryption(command): try command.execute(controller: controller)
        case .lowEnergyReadSupportedStates: try LEReadSupportedStatesCommand().execute(controller: controller)
        case let .lowEnergyReceiverTest(command): try command.execute(controller: controller)
        case let .lowEnergyTransmitterTest(command): try command.execute(controller: controller)
        case .lowEnergyTestEnd:  try LETestEndCommand().execute(controller: controller)
        case let .lowEnergyAddDeviceToResolvingList(command): try command.execute(controller: controller)
        case let .lowEnergyRemoveDeviceFromResolvingList(command): try command.execute(controller: controller)
        case let .lowEnergySetDataLength(command): try command.execute(controller: controller)
        }
    }
}

public protocol CommandProtocol {
    
    static var commandType: CommandType { get }
    
    func execute <Controller: BluetoothHostControllerInterface> (controller: Controller) throws
}

public protocol ArgumentableCommand: CommandProtocol {
    
    associatedtype Option: OptionProtocol

    init(parameters: [Parameter<Option>]) throws
}

public extension ArgumentableCommand {
    
    init(arguments: [String]) throws {
        
        let parameters = try Parameter<Option>.parse(arguments: arguments)
        
        try self.init(parameters: parameters)
    }
}

public extension Command {
    
    public init(arguments: [String]) throws {
        
        guard let commandTypeString = arguments.first
            else { throw CommandError.noCommand }
        
        guard let commandType = CommandType(rawValue: commandTypeString)
            else { throw CommandError.invalidCommandType(commandTypeString) }
        
        let commandArguments = Array(arguments.dropFirst())
        
        switch commandType {
        case .lowEnergyScan:
            let command = try LEScanCommand(arguments: commandArguments)
            self = .lowEnergyScan(command)
        case .readLocalName:
            self = .readLocalName
        case .writeLocalName:
            let command = try WriteLocalNameCommand(arguments: commandArguments)
            self = .writeLocalName(command)
        case .iBeacon:
            let command = try iBeaconCommand(arguments: commandArguments)
            self = .iBeacon(command)
        case .lowEnergySetRandomAddress:
            let command = try LESetRandomAddressCommand(arguments: commandArguments)
            self = .lowEnergySetRandomAddress(command)
        case .lowEnergyClearWhiteList:
            self = .lowEnergyClearWhiteList
        case .lowEnergyCreateConnectionCancel:
            self = .lowEnergyCreateConnectionCancel
        case .lowEnergyReadLocalSupportedFeatures:
            self = .lowEnergyReadLocalSupportedFeatures
        case .lowEnergySetEventMask:
            let command = try LESetEventMaskCommand(arguments: commandArguments)
            self = .lowEnergySetEventMask(command)
        case .lowEnergyReadBufferSize:
            self = .lowEnergyReadBufferSize
        case .lowEnergyReadChannelMap:
            let command = try LEReadChannelMapCommand(arguments: commandArguments)
            self = .lowEnergyReadChannelMap(command)
        case .lowEnergyAddDeviceToWhiteList:
            let command = try LEAddDeviceToWhiteListCommand(arguments: commandArguments)
            self = .lowEnergyAddDeviceToWhiteList(command)
        case .lowEnergyRemoveDeviceFromWhiteList:
            let command = try LERemoveDeviceFromWhiteListCommand(arguments: commandArguments)
            self = .lowEnergyRemoveDeviceFromWhiteList(command)
        case .lowEnergyReadWhiteListSize:
            self = .lowEnergyReadWhiteListSize
        case .lowEnergyReadAdvertisingChannelTxPower:
            self = .lowEnergyReadAdvertisingChannelTxPower
        case .lowEnergyRand:
            self = .lowEnergyRand
        case .lowEnergySetAdvertisingParameters:
            let command = try LESetAdvertisingParametersCommand(arguments: commandArguments)
            self = .lowEnergySetAdvertisingParameters(command)
        case .lowEnergyConnectionUpdate:
            let command = try LEConnectionUpdateCommand(arguments: commandArguments)
            self = .lowEnergyConnectionUpdate(command)
        case .lowEnergySetAdvertisingEnable:
            let command = try LESetAdvertisingEnableCommand(arguments: commandArguments)
            self = .lowEnergySetAdvertisingEnable(command)
        case .lowEnergyCreateConnection:
            let command = try LECreateConnectionCommand(arguments: commandArguments)
            self = .lowEnergyCreateConnection(command)
        case .lowEnergyReadRemoteFeatures:
            let command = try LEReadRemoteFeaturesCommand(arguments: commandArguments)
            self = .lowEnergyReadRemoteFeatures(command)
        case .lowEnergyEncrypt:
            let command = try LEEncryptCommand(arguments: commandArguments)
            self = .lowEnergyEncrypt(command)
        case .lowEnergyLongTermKeyRequestNegativeReply:
            let command = try LELongTermKeyRequestNegativeReplyCommand(arguments: commandArguments)
            self = .lowEnergyLongTermKeyRequestNegativeReply(command)
        case .lowEnergyLongTermKeyRequestReply:
            let command = try LELongTermKeyRequestReplyCommand(arguments: commandArguments)
            self = .lowEnergyLongTermKeyRequestReply(command)
        case .lowEnergyStartEncryption:
            let command = try LEStartEncryptionCommand(arguments: commandArguments)
            self = .lowEnergyStartEncryption(command)
        case .lowEnergyReadSupportedStates:
            self = .lowEnergyReadSupportedStates
        case .lowEnergyReceiverTest:
            let command = try LEReceiverTestCommand(arguments: commandArguments)
            self = .lowEnergyReceiverTest(command)
        case .lowEnergyTransmitterTest:
            let command = try LETransmitterTestCommand(arguments: commandArguments)
            self = .lowEnergyTransmitterTest(command)
        case .lowEnergyTestEnd:
            self = .lowEnergyTestEnd
        case .lowEnergyAddDeviceToResolvingList:
            let command = try LEAddDeviceToResolvingListCommand(arguments: commandArguments)
            self = .lowEnergyAddDeviceToResolvingList(command)
        case .lowEnergyRemoveDeviceFromResolvingList:
            let command = try LERemoveDeviceFromResolvingListCommand(arguments: commandArguments)
            self = .lowEnergyRemoveDeviceFromResolvingList(command)
        case .lowEnergySetDataLength:
            let command = try LESetDataLengthCommand(arguments: commandArguments)
            self = .lowEnergySetDataLength(command)
        }
    }
}
